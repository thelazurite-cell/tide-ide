{
  "GetPrimaryKeys": "SELECT INX.[name] AS [IndexName]\r\n      ,TBL.[name] AS [TableName]\r\n      ,DS1.[IndexColumnsNames]\r\n      ,DS2.[IncludedColumnsNames]\r\n, inx.is_unique [is_unique], inx.is_primary_key, is_unique_constraint\r\nFROM [sys].[indexes] INX\r\nINNER JOIN [sys].[tables] TBL\r\n    ON INX.[object_id] = TBL.[object_id]\r\nCROSS APPLY\r\n(\r\n    SELECT STUFF\r\n    (\r\n        (\r\n            SELECT \' \' + CLS.[name] + \',\'\r\n            FROM [sys].[index_columns] INXCLS\r\n            INNER JOIN [sys].[columns] CLS\r\n                ON INXCLS.[object_id] = CLS.[object_id]\r\n                AND INXCLS.[column_id] = CLS.[column_id]\r\n            WHERE INX.[object_id] = INXCLS.[object_id]\r\n                AND INX.[index_id] = INXCLS.[index_id]\r\n                AND INXCLS.[is_included_column] = 0\r\n            FOR XML PATH(\'\')\r\n        )\r\n        ,1\r\n        ,1\r\n        ,\'\'\r\n    )\r\n) DS1 ([IndexColumnsNames])\r\nCROSS APPLY\r\n(\r\n    SELECT STUFF\r\n    (\r\n        (\r\n            SELECT \' \' + CLS.[name] + \',\'\r\n            FROM [sys].[index_columns] INXCLS\r\n            INNER JOIN [sys].[columns] CLS\r\n                ON INXCLS.[object_id] = CLS.[object_id]\r\n                AND INXCLS.[column_id] = CLS.[column_id]\r\n            WHERE INX.[object_id] = INXCLS.[object_id]\r\n                AND INX.[index_id] = INXCLS.[index_id]\r\n                AND INXCLS.[is_included_column] = 1\r\n            FOR XML PATH(\'\')\r\n        )\r\n        ,1\r\n        ,1\r\n        ,\'\'\r\n    )\r\n) DS2 ([IncludedColumnsNames])\r\nWHERE inx.name is not null and IndexColumnsNames is not null and tbl.name = @tableName",
  "GetAutoIncrementCheck": "select * from (select col_name(t1.object_id, column_id) as col_name,\r\n                      t1.name,\r\n                      t0.increment_value,\r\n                      t0.generated_always_type\r\n               from sys.identity_columns t0\r\n                           join sys.all_objects t1 on t0.object_id = t1.object_id)t0\r\nwhere t0.col_name = @ColumnName and t0.name = @TableName",
  "GetConstraints": " select schema_name, table_view, object_type, constraint_type, constraint_name, details from(select schema_name(t.schema_id) [schema_name], t.[name] as table_view, case when t.[type] = 'U' then 'Table' when t.[type] = 'V' then 'View' end as [object_type], case when c.[type] = 'PK' then 'Primary key' when c.[type] = 'UQ' then 'Unique constraint' when i.[type] = 1 then 'Unique clustered index' when i.type = 2 then 'Unique index' end as constraint_type, isnull(c.[name], i.[name]) as constraint_name, substring(column_names, 1, len(column_names) - 1) as [details] from sys.objects t left outer join sys.indexes i on t.object_id = i.object_id left outer join sys.key_constraints c on i.object_id = c.parent_object_id and i.index_id = c.unique_index_id cross apply (select col.[name] + ', ' from sys.index_columns ic inner join sys.columns col on ic.object_id = col.object_id and ic.column_id = col.column_id where ic.object_id = t.object_id and ic.index_id = i.index_id order by col.column_id for xml path ('')) D (column_names) where is_unique = 1 and t.is_ms_shipped <> 1 union all select schema_name(t.schema_id) [schema_name], t.[name], 'Table', 'Check constraint', con.[name] as constraint_name, con.[definition] from sys.check_constraints con left outer join sys.objects t on con.parent_object_id = t.object_id left outer join sys.all_columns col on con.parent_column_id = col.column_id and con.parent_object_id = col.object_id union all select schema_name(t.schema_id) [schema_name], t.[name], 'Table', 'Default constraint', con.[name], col.[name] + ' = ' + con.[definition] from sys.default_constraints con left outer join sys.objects t on con.parent_object_id = t.object_id left outer join sys.all_columns col on con.parent_column_id = col.column_id and con.parent_object_id = col.object_id) a where constraint_type != 'Primary key' and table_view = @tableName order by schema_name, table_view, constraint_type, constraint_name select schema_name, table_view, object_type, constraint_type, constraint_name, details from(select schema_name(t.schema_id) [schema_name], t.[name] as table_view, case when t.[type] = 'U' then 'Table' when t.[type] = 'V' then 'View' end as [object_type], case when c.[type] = 'PK' then 'Primary key' when c.[type] = 'UQ' then 'Unique constraint' when i.[type] = 1 then 'Unique clustered index' when i.type = 2 then 'Unique index' end as constraint_type, isnull(c.[name], i.[name]) as constraint_name, substring(column_names, 1, len(column_names) - 1) as [details] from sys.objects t left outer join sys.indexes i on t.object_id = i.object_id left outer join sys.key_constraints c on i.object_id = c.parent_object_id and i.index_id = c.unique_index_id cross apply (select col.[name] + ', ' from sys.index_columns ic inner join sys.columns col on ic.object_id = col.object_id and ic.column_id = col.column_id where ic.object_id = t.object_id and ic.index_id = i.index_id order by col.column_id for xml path ('')) D (column_names) where is_unique = 1 and t.is_ms_shipped <> 1 union all select schema_name(t.schema_id) [schema_name], t.[name], 'Table', 'Check constraint', con.[name] as constraint_name, con.[definition] from sys.check_constraints con left outer join sys.objects t on con.parent_object_id = t.object_id left outer join sys.all_columns col on con.parent_column_id = col.column_id and con.parent_object_id = col.object_id union all select schema_name(t.schema_id) [schema_name], t.[name], 'Table', 'Default constraint', con.[name], col.[name] + ' = ' + con.[definition] from sys.default_constraints con left outer join sys.objects t on con.parent_object_id = t.object_id left outer join sys.all_columns col on con.parent_column_id = col.column_id and con.parent_object_id = col.object_id) a where constraint_type != 'Primary key' and table_view = @tableName order by schema_name, table_view, constraint_type, constraint_name",
  "GetForeignKeys": "SELECT K_Table = FK.TABLE_NAME, FK_Column = CU.COLUMN_NAME, PK_Table = PK.TABLE_NAME, PK_Column = PT.COLUMN_NAME, Constraint_Name = C.CONSTRAINT_NAME FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME INNER JOIN(SELECT i1.TABLE_NAME, i2.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1 INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME WHERE i1.CONSTRAINT_TYPE = 'PRIMARY KEY') PT ON PT.TABLE_NAME = PK.TABLE_NAME where pt.TABLE_NAME = @tableName",
  "GetTableColumns": "SELECT col.column_id, schema_name(tab.schema_id) AS schema_name, tab.name AS table_name, col.name AS column_name, t.name AS data_type, col.max_length, col.precision, tab.object_id, col.collation_name, col.is_nullable,col.is_ansi_padded,col.is_rowguidcol,col.is_identity,object_definition(col.default_object_id) AS default_definition FROM sys.tables AS tab INNER JOIN sys.columns AS col ON tab.object_id = col.object_id LEFT JOIN sys.types AS t ON col.user_type_id = t.user_type_id WHERE tab.name = @tableName ORDER BY schema_name, table_name, column_id",
  "GetViewColumns": "SELECT col.column_id, schema_name(tab.schema_id) as schema_name, object_name(col.object_id) as table_name, col.name as column_name, type_name(user_type_id) as data_type, col.max_length, col.precision, tab.object_id, col.collation_name, col.is_nullable,col.is_ansi_padded,col.is_rowguidcol,col.is_identity,object_definition(col.default_object_id) AS default_definition FROM sys.columns col join sys.views tab on tab.object_id = col.object_id where tab.name = @tableName order by schema_name, table_name, column_id;",
  "GetDatabaseTables": "SELECT TABLE_NAME, TABLE_TYPE,TABLE_CATALOG,TABLE_SCHEMA\r\nFROM INFORMATION_SCHEMA.TABLES\r\nWHERE TABLE_TYPE IN ('BASE TABLE', 'VIEW')",
  "GetDatabases": "SELECT name, database_id, create_date, collation_name FROM sys.databases"
}
